export default [
  {
    question: 'Что такое DOCTYPE и для чего он нужен?',
    answer: 'DOCTYPE - специальный тег, который указывает тип документа и его стандарт. Он должен находится в начале каждого HTML-документа.',
    topic: 'HTML&CSS',
  },
  {
    question: 'С каких элементов состоит базовая разметка HTML-страницы?',
    answer: 'Первой строкой всегда должен идти DOCTYPE, потом корневой блок html, в который вложены блоки head(содержит основную информацию о странице) и body(в него помещаются все остальные элементы страницы)',
    topic: 'HTML&CSS',
  },
  {
    question: 'Что такое семантические HTML-теги и для чего они нужны?',
    answer: 'Семантические теги - это теги, которые самостоятельно описывают своё предназначение. Они делают код более понятным для чтения другими разработчиками и поисковыми машинами, а так же улучшают доступность страницы для людей с ограничеными возможностями',
    topic: 'HTML&CSS',
  },
  {
    question: 'Чем padding отличается от margin?',
    answer: 'padding - отступ от контента элемента до его границы, margin - отступ от границы элемента до других элементов',
    topic: 'HTML&CSS',  
  },
  {
    question: 'Что такое относительные и абсолютные единицы измерения в CSS?. Назовите несколько их примеров',
    answer: 'Абсолютные единицы измерения всегда будут обозначать одно и то же расстояние(px, pt, cm). Относительные же могут менятся в размерах, в зависимости от устройства и размера родительского блока(%, vh, em)',
    topic: 'HTML&CSS',
  },
  {
    question: 'Назвите основые отличия блочных элементов от строчных',
    answer: 'Блочные элементы распологаются каждый с новой строки, тогда как строчные - один за другим в той же строке. Блочные элементы всегда стремятся занять всю ширину страницы, тогда как строчные занимают пространство, соответсвующее их контенту. У блочных элементов есть возможность явно задать размеры.',
    topic: 'HTML&CSS',  
  },
  {
    question: 'Что такое селектор? Какие типы селекторов существуют?',
    answer: 'Селектор - часть css правила, которая указывает, к каким элементам будут применяться стили. Основные типы селекторов: универсальный селектор, селекторы по тегу, по id, по классу, по атрибуту',
    topic: 'HTML&CSS',
  },
  {
    question: 'Что такое псевдоклассы? Назовите несколько примеров псевдоклассов',
    answer: 'Псевдокласс - это ключевое слово, которое добавляется к CSS-селектору через двоеточие и определяет особое состояние элементов. Примерами псевдоклассов являются :hover, :checked, :focus, :visited',
    topic: 'HTML&CSS',  
  },
  {
    question: 'Что такое псевдоэлементы? Назовите несколько примеров псевдоэлементов',
    answer: 'Псевдоэлемент - это ключевое слово, которое добавляется к CSS-селектору через два двоеточия и позволяет стилизовать определённую часть элементов. Примерами псевдоэлементов являются ::before, ::after, ::first-leter, ::placeholder',
    topic: 'HTML&CSS',  
  },
  {
    question: 'Что такое комбинаторы селекторов? Какие комбинаторы селекторов существуют в CSS?',
    answer: 'Комбинаторы - специальные знаки в селекторах, которые соединяют другие селекторы по особым правилам. Существует 4 комбинатора: комбинатор потомка(пробел), дочерний комбинатор(>), соседний родственный комбинатор(+), общий родственный комбинатор(~)',
    topic: 'HTML&CSS', 
  },
  {
    question: 'Что такое специфичность(вес) селектора. Как она вычисляется?',
    answer: 'Если к одному элементу применены несколько одинаковых правил, то действовать будут те, чьи селекторы обладают наибольшим весом. Вес селектора считается по следующим правилам: инлайновый селектор - 1000, селектор по id - 100, селектор по классу/атрибуту/псевдоклассу - 10, селектор по тегу/псевдоэлементу - 1',
    topic: 'HTML&CSS', 
  },
  {
    question: 'Что такое блочная модель CSS? Что в неё входит?',
    answer: 'Блочная модель CSS рассчитывает, какое итоговое пространство будет занимать элемент на странице. В неё входит контент, внутренний отступ(padding), граница, внешний отступ(margin)',
    topic: 'HTML&CSS',  
  },
  {
    question: 'Что такое поток документа?',
    answer: 'Поток документа - это модель, которая определяет как элементы распологаются на странице. Например, блочные элементы - каждый с новой строки, строчные - один за другим в той же строке',
    topic: 'HTML&CSS',  
  },
  {
    question: 'Какие типы позиционирования существуют в CSS?',
    answer: 'Static - значение по умолчанию, позиционирование в соответствии с нормальным потоком документа. Relative - позиционирование относительно первоначального размещения элемента. Absolute - позиционирование относительно первого родительского элемента с не-static позиционированием. Fixed - позиционирование относительно окна браузера. Sticky - ведет себя как relative до тех пор, пока не достигнет указанного порога, после чего "фиксируется"',
    topic: 'HTML&CSS',  
  },
  {
    question: 'В чем разница между адаптивным(adaptive) и отзывчивым(responsive) дизайнами?',
    answer: 'Адаптивный дизайн - несколько разных макетов, которые загружаются в зависимости от устройства. Отзывивый - один макет, который перестраивается в зависимости от устройства',
    topic: 'HTML&CSS',  
  },
  {
    question: 'Что такое DOM?',
    answer: 'DOM - это древовидная модель документа, которая состоит из обьектов, созданых на основании HTML-элементов страницы',
    topic: 'JS',  
  },
  {
    question: 'Какие типы данных существуют в JS?',
    answer: 'string, number, bigint, boolean, symbol, object, null, undefined',
    topic: 'JS',  
  },
  {
    question: 'Что такое ложноподобные(falsy) значения в JS? Назовите их',
    answer: 'Ложноподобными называют те значения, которые после приведения к логическому типу всегда возваращают false. Кроме самого ключевого слова false, ими являются пустые строки, число 0 и -0, NaN, null и undefined',
    topic: 'JS',
  },
  {
    question: 'Чем null отличается от undefined?',
    answer: 'null - явное отсутствие значения, undefined - не определённое значение, оно автоматически присваевается интерпретатором js',
    topic: 'JS',
  },
  {
    question: 'Чем == отличается от ===?',
    answer: '==(нестрогое равно) - сравнивает значения, ===(строгое равно) - сравнивает и тип, и значение',
    topic: 'JS',  
  },
  {
    question: 'Каким будет результат выполнения операции "20" + 2. Почему?',
    answer: '"202", т.к при сложении строк со значениями других типов, JS всегда переводит другие значения в строки и тогда их конкатенирует',
    topic: 'JS',
  },
  {
    question: 'Каким будет результат выполнения операции true + false. Почему?',
    answer: '1, т.к численное значение ключевого слова true - 1, а false - 0',
    topic: 'JS',
  },
  {
    question: 'Какие логические операторы существуют в JS? Опишите их',
    answer: '!(не) - возвращает противоположное логическое значение. ||(или) - возвращает true если хоть одно условие является true. &&(и) - возвращает true если все условия являются true.',
    topic: 'JS',  
  },
  {
    question: 'Какие циклы существуют в JS?',
    answer: 'for, while, do-while',
    topic: 'JS',
  },
  {
    question: 'Что такое строгий режим в JS?',
    answer: 'Строгий режим в js включается строкой "use strict" и заменяет исключениями некоторые игнорируемые ранее ошибки(удаление неудаляемых свойств обьектов, неуникальность названий свойств)',
    topic: 'JS',
  },
  {
    question: 'Что такое рекурсия?',
    answer: 'Рекурсия - это способность функции вызывать саму себя.',
    topic: 'JS',
  },
  {
    question: 'Чем переменная let отличается от переменной const?',
    answer: 'Переменная let, в отличии от const, может быть перезаписана',
    topic: 'JS',  
  },
  {
    question: 'Коротко опишите несколько методов массивов в JS',
    answer: 'forEach - перебор каждого элемента, every - проверка каждого элемента на соответствие требованию, slice - извлечение подмассива',
    topic: 'JS',
  },  
  {
    question: 'Коротко опишите несколько методов строк в JS',
    answer: 'split - разбитие строки на массив, toLower/UpperCase - изменение регистра, trim - обрезка пробелов в начале и конце',
    topic: 'JS',
  },
  {
    question: 'Что такое область видимости(scope)? Какие области видимости существуют в JS?',
    answer: 'Область видимости - это некотороя сущность JavaScript, которая определяет границы доступности переменных. В современном js существует глобальная, функциональная и блочная области видимости',
    topic: 'JS',  
  },
  {
    question: 'Что обозначает ключевое слово this?',
    answer: 'С помощью ключевого слова this внутри функции можно обращаться к обьекту, который в данный момент вызывает эту функцию',
    topic: 'JS',
  },
  {
    question: 'Что такое Hoisting?',
    answer: 'Hoisting - это механизм поднятия переменных и функций на верх области видимости, что дает возможность обращаться к ним ещё до обьявления. Таким механизмом обладают function expression и переменные var',
    topic: 'JS',  
  },
  {
    question: 'Чем function declaration отличается от function expression?',
    answer: 'Function declaration обьявляется с помощью ключевого слова function, а function expression - путем присваивания функции в переменную. Основным различием между ними является наличие у function declaration механизма hoisting',
    topic: 'JS',  
  },
  {
    question: 'Чем переменные let и const отличаются от переменной var?',
    answer: 'Переменная var игнорирует блочную область видимости, а так же обладает механизмом hoisting',
    topic: 'JS',  
  },
  {
    question: 'Как перевести десятичное число в двоичное с помощью js?',
    answer: '+(number).toString(2)',
    topic: 'JS',
  },
  {
    question: 'Что такое массив?',
    answer: 'Массив - это структура данных, которая хранит набор значений, расположеных в памяти друг за другом, доступ к которым осуществляется по индексу',
    topic: 'DS&ALG',
  },
  {
    question: 'Что такое связанный список?',
    answer: 'Связанный список - это структура данных, каждый элемент которой хранит в себе значение, а так же ссылку на следующий элемент.',
    topic: 'DS&ALG',
  },
  {
    question: 'Что такое нотация "О-большое"?',
    answer: '"О-большое" определяет скорость работы алгоритма, а если быть точнее, то насколько быстро возрастает время работы алгоритма при увеличении количества элементов',
    topic: 'DS&ALG',
  },
  {
    question: 'Какие операции выполняются быстрее в массиве, а какие - в связанном списке?',
    answer: 'Массив - поиск элемента, удаление с середины. Связанный список - добавление/удаление в начале',
    topic: 'DS&ALG',
  },
  {
    question: 'Что такое принципы LIFO и FIFO? Какие структуры данных их используют?',
    answer: 'LIFO - последний элемент выходит первым, используется стеком. FIFO - первый элемент выходит первым, используется очередью',
    topic: 'DS&ALG',
  },
  {
    question: 'Что такое дерево?',
    answer: 'Дерево - это набор связанных между собой нецикличных узлов, либо же граф без циклов',
    topic: 'DS&ALG',
  },
  {
    question: 'Чем бинарное поисковое дерево отличается от обычного?',
    answer: 'У каждого узла такого дерева может быть максимум 2 потомка, значение каждого узла должно быть уникальным, а распологаться они должны по принципу "левый потомок - меньшее значение, правый потомок - большее"',
    topic: 'DS&ALG',
  },
  {
    question: 'Какие вы знаете алгоритмы поиска? Опишите один из них',
    answer: 'Простой(последовательный), поиск в ширину, бинарный. Бинарный поиск производится на отсортированом наборе данных и заключается в его разделении на равные части до тех пор, пока не останется только целевой элемент',
    topic: 'DS&ALG',
  },
  {
    question: 'Какие вы знаете алгоритмы сортировки? Опишите один из них',
    answer: 'Выбором, пузырьковая, вставками, слиянием, быстрая. Быстрая сортировка проводится следующим образом: 1. Выбирается опорный элемент(лучше всего рандомный). 2. Создаются 2 подмассива - с элементами, большими и меньшими за опорный. 3. Функция сортировки рекурсивно применяется к подмассивам. 4. Возвращается результат вида "меньшие элементы - опорный элемент - большие элементы"',
    topic: 'DS&ALG',
  },
  {
    question: 'Что такое ООП?',
    answer: 'ООП, или Обьектно-Ориентированное Программирование - это подход разработки, при котором вся программа рассматривается как набор обьектов, которые взаимодействуют между собой',
    topic: 'OOP',
  },
  {
    question: 'Назовите основые принципы ООП',
    answer: 'Полиморфизм, наследование, инкапсуляция, абстракция, композиция',
    topic: 'OOP',
  },
  {
    question: 'Что такое класс?',
    answer: 'Класс можно представить как некоторую схему, по которой создаются обьекты',
    topic: 'OOP',
  },
  {
    question: 'Что такое наследование?',
    answer: 'Наследование - это возможность создать класс на основе уже существующего, расширяя его функционал',
    topic: 'OOP',
  },
  {
    question: 'Опишите модификаторы доступа public, protected и private',
    answer: 'Public - доступны в любом месте кода. Protected - доступны из класса и его производных. Private - доступны только внутри класса',
    topic: 'OOP',
  },
  {
    question: 'Что такое абстрактный класс?',
    answer: 'Абстрактным называют класс, который содержит только самые важные и общие моменты поведения и состояния классов, которые потом будут на нем основываться',
    topic: 'OOP',
  },
  {
    question: 'Что такое UML? Для чего он нужен в ООП?',
    answer: 'UML - это унифицированный язык моделирования, который используется для построения диаграмм и проектирования. В ООП он нужен для построения абстрактных моделей перед написанием кода',
    topic: 'OOP',
  },
  {
    question: 'Что такое полиморфизм?',
    answer: 'Полиморфизм - это способность разных обьектов выполнять ту же функцию по-своему',
    topic: 'OOP',
  },
  {
    question: 'Что такое композиция?',
    answer: 'Композиция - это комбинирование разных обьектов, которые выступают элементами одного полноценного полнофункционального обьекта',
    topic: 'OOP',
  },
  {
    question: 'Что такое инкапсуляция?',
    answer: 'Инкапсуляция - это отделение внешнего и внутреннего интерфейсов путем построения удобных инструментов для взаимодействия с обьектом без необходимости разбираться в его "внутренностях"',
    topic: 'OOP',
  },
];